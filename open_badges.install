<?php

/**
 * @file
 * @brief Open Badges install file
 *
 * This file contains all the installation functions of the schema, tables and variables
 * used by the module.
 *
 * @author Jeff Robbins (jjeff), http://drupal.org/user/17190
 * @author Chad Phillips (hunmonk), http://drupal.org/user/22079
 * @author Heine Deelstra (Heine), http://drupal.org/user/17943
 * @author Nuno Veloso (nunoveloso18), http://drupal.org/user/80656
 * @author Richard Skinner (Likeless), http://drupal.org/user/310635
 *
 * @warning For more information on licensing, read the LICENCE.txt file.
 *
 */

include 'open_badges_constants.inc';

/**
 * Implements hook_schema().
 */
function open_badges_schema() {
  $schema = array();

  $schema['open_badges_badges'] = array(
    'description' => 'Defines the user badges themselves (image, weight etc.)',
    'fields' => array(
      'bid' => array(
        'description' => t('Original badge ID'),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        ),
      'name' => array(
        'description' => t('Badge name'),
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
        'default' => '',
        ),
      'image' => array(
        'description' => t('Associated image. Can be a full URL, or a relative path for the image library.'),
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        ),
      'criteria' => array(
        'description' => t('URL to the description of the badge and criteria for earning the badge.'),
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        ),
      'description' => array(
        'description' => t('Short description of the badge.  (Maximum of 128 characters)'),
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        ),
      'issuername' => array(
        'description' => t('Human-readable name of the issuing agent. (i.e,. "Boy Scouts")'),
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        ),
      'issuerorg' => array(
        'description' => t('Organization for which the badge is being issued. (i.e., "Troop #218")'),
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => '',
        ),
      'issuercontact' => array(
        'description' => t('A human-monitored email address associated with the issuer.'),
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => '',
        ),
      'issuerurl' => array(
        'description' => t('URL for the issuer.  Defaults to the root issuing domain if not provided.'),
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => '',
        ),
      'weight' => array(
        'description' => t('Order in list'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        ),
      'tid' => array(
        'description' => t('Optional associated taxonomn term id'),
        'type' => 'int',
        'not null' => FALSE,
        'unsigned' => TRUE,
        ),
      'unhideable' => array(
        'description' => t('If this is 1, the badge cannot be hidden by being moved down in weight. It will always show up.'),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        ),
      'fixedweight' => array(
        'description' => t('If this is 1, the badge cannot have a user assigned weight, regardless of settings.'),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        ),
      'doesnotcounttolimit' => array(
        'description' => t('If this is 1, the badge does not count towards the limit for number of badges to display per user.'),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        ),
      ),
    'primary key' => array('bid'),
    'indexes' => array(
      'bid_weight_name' => array('bid', 'weight', 'name'),
      'weight_name' => array('weight', 'name'),
      'tid_name' => array('tid', 'name'),
      )
    );

  $schema['open_badges_roles'] = array(
    'description' => 'Stores which roles grant which badges.',
    'fields' => array(
      'rid' => array(
        'description' => t('Role ID'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        ),
      'bid' => array(
        'description' => t('Badge ID'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        ),
      ),
    'primary key' => array('bid', 'rid'),
    );

  $schema['open_badges_permissions'] = array(
    'description' => 'Stores whether user has allowed sharing of badges with Mozilla OBI.',
    'fields' => array(
      'uid' => array(
        'description' => t('User ID'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        ),
      'userallowsharing' => array(
        'description' => t('If this is 1, the user\'s badges may be shared with the Mozilla OBI.'),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => OPEN_BADGES_USER_DECISION_NONE,
        ),
      ),
    'primary key' => array('uid'),
    );

  $schema['open_badges_user'] = array(
    'description' => 'Stores which users have which badges.',
    'fields' => array(
      'uid' => array(
        'description' => t('User ID'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        ),
      'bid' => array(
        'description' => t('Badge ID'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        ),
      'bakedimage' => array(
        'description' => t('"Baked" image returned from Mozilla OBI.'),
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        ),
      'state' => array(
        'description' => t('State of this badge in the Mozilla OBI process of "baking", sharing, etc.'),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => OPEN_BADGES_STATE_UNDEFINED,
        ),
      'usernotified' => array(
        'description' => t('If this is 1, the user has been notified that the badge has been issued.'),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        ),
      'badgeallowsharing' => array(
        'description' => t('If this is 1, this badges may be displayed locally and shared with the Mozilla OBI.'),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => OPEN_BADGES_USER_DECISION_NONE,
        ),
      'privateurl' => array(
        'description' => t('Private, non-deterministic, persistent URL given to Mozilla OBI when "baking" a badge.'),
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => '',
        ),
      'type' => array(
        'description' => t("Whether set as part of the role ('role'), or individually assigned ('user')"),
        'type' => 'varchar',
        'length' => 20,
        'not null' => TRUE,
        'default' => '',
        ),
      'evidence' => array(
        'description' => t('URL with information about how this user earned this badge.'),
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => '',
        ),
      'issuedate' => array(
        'description' => t('Date when the badge was issued.  Defaults to the current date.'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => '0',
        ),
      'expirationdate' => array(
        'description' => t('Date when the badge expires.  The default is that the badge does not expire.'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => '0',
        ),
      'userweight' => array(
        'description' => t('Order in list, as set by user.'),
        'type' => 'int',
        'not null' => FALSE,
        ),
      ),
    'primary key' => array('bid', 'uid', 'type'),
    'indexes' => array(
      'uid_bid' => array('uid', 'bid'),
      'uid_weight' => array('uid', 'userweight'),
      'type' => array('type'),
      'privateurl' => array('privateurl'),
      ),
    );

  return $schema;
}

/**
 * Implements hook_install().
 */
function open_badges_install() {
  drupal_install_schema('open_badges');
}


/**
 * Implements hook_uninstall().
 */
function open_badges_uninstall() {
  // Delete files.
  $dir = file_create_path('badges');
  if ($dir) {
    $files = file_scan_directory($dir, '.*\.(gif|jpg|jpeg|png)', array('.', '..', 'CVS'), 0, FALSE);
    foreach ($files as $file) {
      file_delete($file->filename);
    }
  }

  // Delete the badges directory.
  if (file_exists($dir)) {
    rmdir($dir);
  }

  drupal_uninstall_schema('open_badges');

  variable_del('open_badges_defaultissuername');
  variable_del('open_badges_imagecache');
  variable_del('open_badges_nobadges');
  variable_del('open_badges_showone');
  variable_del('open_badges_showblocked');
  variable_del('open_badges_userweight');
  variable_del('open_badges_vid');
}


/**
 * Implements hook_update_N()
 * new DB structure
function open_badges_update_6001() {
  $ret = array();
  db_drop_primary_key($ret, 'open_badges_user');
  db_add_primary_key($ret, 'open_badges_user', array('bid', 'uid', 'type'));
  db_add_index($ret, 'open_badges_user', 'type', array('type'));
  return $ret;
}
 */
